Opsero Electronic Design Inc. 2019
Jeff Johnson
ZynqMP FSBL hooks patch 2019.2
==============================
This patch modifies the ZynqMP FSBL to add code to the XFsbl_HookBeforeHandoff which is
executed before the FSBL hands over control to U-Boot. This code is necessary for 
initialization of the 96B Quad Ethernet Mezzanine and the PCS/PMA or SGMII IP cores,
so that U-Boot and Linux can make use of the Ethernet ports. The added code does the 
following:
1. Initializes the MAC with MDIO interface (either the GEM or the AXI Ethernet of port 0)
   so that it's MDIO interface can be used (we need it to communicate with the external 
   PHYs and the PCS/PMA or SGMII IP cores)
2. Assert reset of PCS/PMA or SGMII IP core
3. Hardware reset the 4x Ethernet PHYs and release from reset (only on ps_gem design)
4. Enable the 625MHz SGMII output clock of the PHY of port 3 of the 96B Quad Ethernet
   Mezzanine card (PHY address 0xF). This clock is required by the PCS/PMA or SGMII IP core
5. Release the PCS/PMA or SGMII IP core from reset
6. Disable ISOLATE bit on all PCS/PMA or SGMII IP cores, and enable autonegotiation
   on those cores for ports 0-2. Note that port 3 cannot support SGMII autonegotiation
7. Initialize the external PHYs for optimal operation
8. Disable SGMII auto-negotiation in the external PHY of port 3

diff -Naur a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hooks.c b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hooks.c
--- a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hooks.c	2019-11-07 10:42:40.000000000 -0500
+++ b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hooks.c	2019-11-07 10:49:22.793809202 -0500
@@ -49,15 +49,134 @@
 #include "xfsbl_hw.h"
 #include "xfsbl_hooks.h"
 #include "psu_init.h"
+#include "sleep.h"
+#include "xparameters.h"
+
+#ifdef XPAR_XAXIETHERNET_NUM_INSTANCES
+#include "xaxiethernet.h"
+#else
+#include "xemacps.h"
+#endif
+
 /************************** Constant Definitions *****************************/
+#define PHY_TI_IDENTIFIER					0x2000
 
-/**************************** Type Definitions *******************************/
+/* TI DP83867 PHY Registers */
+#define DP83867_R32_RGMIICTL1					0x32
+#define DP83867_R86_RGMIIDCTL					0x86
+
+#define TI_PHY_REGCR			0xD
+#define TI_PHY_ADDDR			0xE
+#define TI_PHY_PHYCTRL			0x10
+#define TI_PHY_CFGR2			0x14
+#define TI_PHY_SGMIITYPE		0xD3
+#define TI_PHY_CFGR2_SGMII_AUTONEG_EN	0x0080
+#define TI_PHY_SGMIICLK_EN		0x4000
+#define TI_PHY_REGCR_DEVAD_EN		0x001F
+#define TI_PHY_REGCR_DEVAD_DATAEN	0x4000
+#define TI_PHY_CFGR2_MASK		0x003F
+#define TI_PHY_REGCFG4			0x0031
+#define TI_PHY_RGMIICTL			0x0032
+#define TI_PHY_REGCR_DATA		0x401F
+#define TI_PHY_CFG4RESVDBIT7		0x80
+#define TI_PHY_CFG4RESVDBIT8		0x100
+#define TI_PHY_CFG4_AUTONEG_TIMER	0x60
+#define TI_PHY_10M_SGMII_CFG		0x016F
+
+/* TI DP83867 PHY Masks */
+#define TI_PHY_CFG2_SPEEDOPT_10EN          0x0040
+#define TI_PHY_CFG2_SGMII_AUTONEGEN        0x0080
+#define TI_PHY_CFG2_SPEEDOPT_ENH           0x0100
+#define TI_PHY_CFG2_SPEEDOPT_CNT           0x0800
+#define TI_PHY_CFG2_SPEEDOPT_INTLOW        0x2000
+#define TI_PHY_10M_SGMII_RATE_ADAPT		   0x0080
+#define TI_PHY_CR_SGMII_EN				   0x0800
+#define TI_PHY_CFG4_SGMII_AN_TIMER         0x0060
+
+/* Control register masks for PCS/PMA SGMII core */
+#define IEEE_CTRL_RESET_MASK                   	0x8000
+#define IEEE_CTRL_LOOPBACK_MASK                	0x4000
+#define IEEE_CTRL_SPEED_LSB_MASK               	0x2000
+#define IEEE_CTRL_AUTONEG_MASK                  0x1000
+#define IEEE_CTRL_PWRDOWN_MASK                  0x0800
+#define IEEE_CTRL_ISOLATE_MASK                  0x0400
+#define IEEE_CTRL_RESTART_AN_MASK               0x0200
+#define IEEE_CTRL_DUPLEX_MASK               	0x0100
+#define IEEE_CTRL_COLLISION_MASK               	0x0080
+#define IEEE_CTRL_SPEED_MSB_MASK               	0x0040
+#define IEEE_CTRL_UNIDIRECTIONAL_MASK           0x0020
+
+/* Registers for PCS/PMA SGMII core */
+#define PHY_CTRL_REG	  						0
+#define PHY_STATUS_REG  						1
+#define PHY_IDENTIFIER_1_REG					2
+#define PHY_IDENTIFIER_2_REG					3
+#define PHY_DETECT_MASK 					0x1808
+#define PHY_TI_IDENTIFIER					0x2000
+#define PHY_XILINX_PCS_PMA_ID1			0x0174
+#define PHY_XILINX_PCS_PMA_ID2			0x0C00
+
+/* GPIO register offsets */
+#define GPIO_DATA_0_OFFSET		0x00000040
+#define GPIO_DATA_1_OFFSET		0x00000044
+#define GPIO_DATA_2_OFFSET		0x00000048
+#define GPIO_DATA_3_OFFSET		0x0000004C
+#define GPIO_DATA_4_OFFSET		0x00000050
+#define GPIO_DATA_5_OFFSET		0x00000054
+
+#define GPIO_DIRM_0_OFFSET		0x00000204
+#define GPIO_DIRM_1_OFFSET		0x00000244
+#define GPIO_DIRM_2_OFFSET		0x00000284
+#define GPIO_DIRM_3_OFFSET		0x000002C4
+#define GPIO_DIRM_4_OFFSET		0x00000304
+#define GPIO_DIRM_5_OFFSET		0x00000344
+
+#define GPIO_OEN_0_OFFSET		0x00000208
+#define GPIO_OEN_1_OFFSET		0x00000248
+#define GPIO_OEN_2_OFFSET		0x00000288
+#define GPIO_OEN_3_OFFSET		0x000002C8
+#define GPIO_OEN_4_OFFSET		0x00000308
+#define GPIO_OEN_5_OFFSET		0x00000348
+
+/*************** Type Definitions *******************************/
 
 /***************** Macros (Inline Functions) Definitions *********************/
 
 /************************** Function Prototypes ******************************/
 
 /************************** Variable Definitions *****************************/
+
+// External PHY addresses on 96B Quad Ethernet Mezzanine
+const u16 extphyaddr[4] = {0x1,0x3,0xC,0xF};
+// SGMII PHY addresses determined in Vivado design
+const u16 sgmiiphyaddr[5] = {0x2,0x4,0xD,0x10,0x11};
+
+#ifdef XPAR_XAXIETHERNET_NUM_INSTANCES
+typedef XAxiEthernet MacType;
+typedef XAxiEthernet_Config MacConfigType;
+extern XAxiEthernet_Config XAxiEthernet_ConfigTable[];
+XAxiEthernet_Config* Mac_ConfigTable = XAxiEthernet_ConfigTable;
+#define Generic_CfgInitialize(a,b,c) XAxiEthernet_CfgInitialize(a,b,c)
+#define Generic_SetMdioDivisor(a,b) XAxiEthernet_PhySetMdioDivisor(a,b)
+#define Generic_PhyRead(a,b,c,d) XAxiEthernet_PhyRead(a,b,c,d)
+#define Generic_PhyWrite(a,b,c,d) XAxiEthernet_PhyWrite(a,b,c,d)
+#define MAC_W_MDIO_BASEADDR XPAR_AXI_ETHERNET_0_BASEADDR
+#define MAC_NUM_INSTANCES XPAR_XAXIETHERNET_NUM_INSTANCES
+#define MDIO_CLK_DIVISOR 49
+#else
+typedef XEmacPs MacType;
+typedef XEmacPs_Config MacConfigType;
+extern XEmacPs_Config XEmacPs_ConfigTable[];
+XEmacPs_Config* Mac_ConfigTable = XEmacPs_ConfigTable;
+#define Generic_CfgInitialize(a,b,c) XEmacPs_CfgInitialize(a,b,c)
+#define Generic_SetMdioDivisor(a,b) XEmacPs_SetMdioDivisor(a,b)
+#define Generic_PhyRead(a,b,c,d) XEmacPs_PhyRead(a,b,c,d)
+#define Generic_PhyWrite(a,b,c,d) XEmacPs_PhyWrite(a,b,c,d)
+#define MAC_W_MDIO_BASEADDR XPAR_XEMACPS_0_BASEADDR
+#define MAC_NUM_INSTANCES XPAR_XEMACPS_NUM_INSTANCES
+#define MDIO_CLK_DIVISOR 7
+#endif
+
 #ifdef XFSBL_BS
 u32 XFsbl_HookBeforeBSDownload(void )
 {
@@ -84,6 +203,63 @@
 }
 #endif
 
+/* Extended Read function for PHY registers above 0x001F */
+static void PhyReadExtended(MacType *macp, u16 phy_addr, u16 reg, u16 *pvalue)
+{
+	u16 PhyAddr = phy_addr & 0x001f;
+	Generic_PhyWrite(macp, PhyAddr, TI_PHY_REGCR, 0x001f );
+	Generic_PhyWrite(macp, PhyAddr, TI_PHY_ADDDR, reg );
+	Generic_PhyWrite(macp, PhyAddr, TI_PHY_REGCR, 0x401f);
+	Generic_PhyRead(macp, PhyAddr, TI_PHY_ADDDR, pvalue);
+}
+
+/* Extended Write function for PHY registers above 0x001F */
+static void PhyWriteExtended(MacType *macp, u16 phy_addr, u16 reg, u16 value)
+{
+	u16 PhyAddr = phy_addr & 0x001f;
+	u16 tmp;
+	Generic_PhyWrite(macp, PhyAddr, TI_PHY_REGCR, 0x001f );
+	Generic_PhyWrite(macp, PhyAddr, TI_PHY_ADDDR, reg );
+	Generic_PhyWrite(macp, PhyAddr, TI_PHY_REGCR, 0x401f);
+	Generic_PhyWrite(macp, PhyAddr, TI_PHY_ADDDR, value);
+	/* Read-back and verify */
+	Generic_PhyRead(macp, PhyAddr, TI_PHY_ADDDR, &tmp);
+	if( tmp != value )
+		xil_printf("ERROR: PHYWriteExtended read-back verification failed!\r\n");
+}
+
+/*
+ * init_dp83867_phy: Initialize DP83867 PHY
+ *
+ * There are a few things that need to be configured in the
+ * DP83867 PHY for optimal operation:
+ * - Enable 10Mbps operation (clear bit 7 of register 0x016F)
+ * - Set SGMII Auto-negotiation timer to 11ms
+ * - Disable RGMII
+ *
+ * Note that these configurations will be done by the DP83867 driver
+ * when the ports are first initialized (eg. ifconfig eth0 up) but
+ * we also want to do them here in the FSBL so that U-boot can make
+ * full use of the ports.
+ */
+static void init_dp83867_phy(MacType *macp, u32 phy_addr)
+{
+	u16 control;
+
+	// Enable 10Mbps operation
+	PhyReadExtended(macp, phy_addr, TI_PHY_10M_SGMII_CFG, &control);
+	control &= ~(TI_PHY_10M_SGMII_RATE_ADAPT);
+	PhyWriteExtended(macp, phy_addr, TI_PHY_10M_SGMII_CFG, control);
+
+	// Set SGMII autonegotiation timer to 11ms
+	PhyReadExtended(macp, phy_addr, TI_PHY_REGCFG4, &control);
+	control |= TI_PHY_CFG4_SGMII_AN_TIMER;
+	PhyWriteExtended(macp, phy_addr, TI_PHY_REGCFG4, control);
+
+	// Disable RGMII
+	PhyWriteExtended(macp, phy_addr, TI_PHY_RGMIICTL, 0x0);
+}
+
 u32 XFsbl_HookBeforeHandoff(u32 EarlyHandoff)
 {
 	u32 Status = XFSBL_SUCCESS;
@@ -91,6 +267,120 @@
 	/**
 	 * Add the code here
 	 */
+	MacType mac_with_mdio;
+	MacConfigType *mac_config_p = NULL;
+	u16 control;
+	u32 i;
+
+	// First initialize the MAC with the MDIO interface
+	u32 result = XST_SUCCESS;
+	// Obtain config of the MAC with the MDIO interface
+	for (i = 0; i < MAC_NUM_INSTANCES; i++) {
+		if (Mac_ConfigTable[i].BaseAddress == (unsigned)MAC_W_MDIO_BASEADDR) {
+			mac_config_p = &Mac_ConfigTable[i];
+			break;
+		}
+	}
+
+	// Exit if we did not find the MAC with MDIO interface
+	if (mac_config_p == NULL) {
+		XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: Could not find GEM0 config table");
+		return(Status);
+	}
+
+	// Initialize MAC with MDIO interface
+	result = Generic_CfgInitialize(&mac_with_mdio, mac_config_p,
+						mac_config_p->BaseAddress);
+	if (result != XST_SUCCESS) {
+		XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: In %s:MAC Configuration Failed....\r\n", __func__);
+	}
+
+	// Set the MDIO clock divisor
+	Generic_SetMdioDivisor(&mac_with_mdio, MDIO_CLK_DIVISOR);
+
+	// Assert SGMII core reset: connected to pl_resetn0 (active low)
+	// pl_resetn0 is EMIO GPIO bank 5, bit 31, EMIO[95]
+	XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: Assert SGMII core reset\n\r");
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_DIRM_5_OFFSET,0x80000000);	// GPIO direction = OUTPUT
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_OEN_5_OFFSET,0x80000000);	// GPIO enable output
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_DATA_5_OFFSET,0x00000000);
+
+#ifndef XPAR_XAXIETHERNET_NUM_INSTANCES
+	// Assert external PHY resets: connected to EMIO GPIO[0-3]
+	// EMIO[0-3] is GPIO bank 3, bits 0-3
+	// We only do this for the GEM design because AXI Ethernet
+	// properly handles PHY reset
+	XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: Hard reset external PHYs\n\r");
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_DIRM_3_OFFSET,0x0000000F);	// GPIO direction = OUTPUT
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_OEN_3_OFFSET,0x0000000F);	// GPIO enable output
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_DATA_3_OFFSET,0x00000000);	// GPIO value = LOW
+	usleep(10000);
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_DATA_3_OFFSET,0x0000000F);	// GPIO value = LOW
+	usleep(5000);
+#endif
+
+	// Enable the 625MHz clock output on external PHY of port 3 (addr 15)
+	// This clock is required by the SGMII cores of ALL PORTS
+	XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: Enable 625MHz clock output\n\r");
+
+	// Make sure that we can read from the external PHY
+	Generic_PhyRead(&mac_with_mdio, extphyaddr[3], PHY_IDENTIFIER_1_REG, &control);
+	// If we don't read the correct TI identifier, then we flag the issue
+	// but we continue to release SGMII core from reset
+	if(control != PHY_TI_IDENTIFIER) {
+		XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: External PHY returned ID 0x%04X. Failed to enable SGMII clock.\r\n",control);
+	}
+	else {
+		// Enable SGMII Clock
+		PhyReadExtended(&mac_with_mdio,extphyaddr[3],TI_PHY_SGMIITYPE,&control);
+		control |= TI_PHY_SGMIICLK_EN;
+		PhyWriteExtended(&mac_with_mdio,extphyaddr[3],TI_PHY_SGMIITYPE,control);
+
+		// If we failed to enable the clock, then we flag the issue and continue
+		// to release the SGMII core from reset
+		PhyReadExtended(&mac_with_mdio,extphyaddr[3],TI_PHY_SGMIITYPE,&control);
+		if((control & TI_PHY_SGMIICLK_EN) == 0){
+			XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: Failed to enable SGMII clock (0x%04X)\n\r",control);
+		}
+		// Otherwise we wait for the clock to stabilize before releasing
+		// the SGMII core from reset
+		else {
+			usleep(500);
+		}
+	}
+
+	// Release SGMII core reset
+	XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: Release SGMII core reset\n\r");
+	XFsbl_Out32(XPAR_XGPIOPS_0_BASEADDR | GPIO_DATA_5_OFFSET,0x80000000);
+
+	// Finally we need to disable the ISOLATE bit on all the SGMII cores
+	// because it is enabled by default
+	XFsbl_Printf(DEBUG_PRINT_ALWAYS,"96BQuadEthernet: Disable ISOLATE on all SGMII cores\n\r");
+
+	// Configure the SGMII cores for ports 0-2
+	// Auto-negotiation enable, full duplex, 1Gbps
+	for(i=0; i<3; i++){
+		Generic_PhyWrite(&mac_with_mdio, sgmiiphyaddr[i], PHY_CTRL_REG,
+				IEEE_CTRL_DUPLEX_MASK | IEEE_CTRL_SPEED_MSB_MASK |
+				IEEE_CTRL_AUTONEG_MASK);
+	}
+	// Configure the SGMII cores for port 3
+	// No auto-negotiation, full duplex, 1Gbps
+	for(i=3; i<5; i++){
+		Generic_PhyWrite(&mac_with_mdio, sgmiiphyaddr[i], PHY_CTRL_REG,
+				IEEE_CTRL_DUPLEX_MASK | IEEE_CTRL_SPEED_MSB_MASK |
+				IEEE_CTRL_UNIDIRECTIONAL_MASK);
+	}
+
+	// Initialize all 4x TI DP83867 PHYs
+	for(i = 0; i<4; i++){
+		init_dp83867_phy(&mac_with_mdio,extphyaddr[i]);
+	}
+
+	// Disable SGMII auto-negotiation in the external PHY of port 3
+	Generic_PhyRead(&mac_with_mdio, extphyaddr[3], TI_PHY_CFGR2, &control);
+	control &= ~TI_PHY_CFG2_SGMII_AUTONEGEN;
+	Generic_PhyWrite(&mac_with_mdio, extphyaddr[3], TI_PHY_CFGR2, control);
 
 	return Status;
 }
